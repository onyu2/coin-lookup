#!/bin/sh

# function to display currency stats
display_stats() {
    local currency=$1
    echo "$currency:"
    jq -r ".DISPLAY.$currency.USD | \"\\(.PRICE)   PRICE\\n\\(.CHANGEPCTDAY)%           DAILY CHANGE\\n\\(.HIGHDAY)        24H HIGH\\n\\(.LOWDAY)         24H LOW\\n\\(.MKTCAP)         MARKET CAP\"" <<< "$response"
    echo ""
}

# function to display minimal stats
display_mini_stats() {
    local currency=$1
    price=$(jq -r ".DISPLAY.$currency.USD.PRICE" <<< "$response" | tr -d '$ ')
    printf "%s: $%s\n" "$currency" "$price"
}

# function to format timestamp
format_timestamp() {
    local timestamp=$1
    if [[ $timestamp =~ ^[0-9]+$ ]]; then
        if date -r "$timestamp" &>/dev/null; then
            # BSD-style date command (macOS)
            date -r "$timestamp" "+%m/%d/%y %I:%M:%S %p"
        else
            # GNU-style date command (Linux)
            date -d "@$timestamp" "+%m/%d/%y %I:%M:%S %p"
        fi
    else
        echo "$timestamp"
    fi
}

# check if no arguments are provided, then display the current prices of btc, eth, and ltc
if [ "$#" -eq 0 ]; then
    response=$(curl -s "https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,LTC&tsyms=USD&e=CCCAGG")
    timestamp=$(jq -r ".DISPLAY.BTC.USD.LASTUPDATE" <<< "$response")
    echo "CURRENT PRICE OF CRYPTO IN USD (UPDATED: $timestamp):"
    display_mini_stats "BTC"
    display_mini_stats "ETH"
    display_mini_stats "LTC"
    exit 0
fi

# check for 'full' argument
if [ "$#" -eq 1 ] && [ "$1" = "full" ]; then
    response=$(curl -s "https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,LTC&tsyms=USD&e=CCCAGG")
    timestamp=$(jq -r ".DISPLAY.BTC.USD.LASTUPDATE" <<< "$response")
    echo "CURRENT PRICE OF CRYPTO IN USD (UPDATED: $timestamp):"
    echo ""
    display_stats "BTC"
    display_stats "ETH"
    display_stats "LTC"
    exit 0
fi

# if exactly 2 arguments are provided, do the conversion
if [ "$#" -eq 2 ]; then
    currency=$(echo "$1" | tr '[:lower:]' '[:upper:]')  # convert input to uppercase
    amount=$2

    # validate amount is a number
    if ! echo "$amount" | grep -E '^([0-9]*\.)?[0-9]+$' >/dev/null; then
        echo "ERROR: INVALID AMOUNT. PLEASE ENTER A VALID NUMBER."
        exit 1
    fi

    # fetch data for the specified currency
    response=$(curl -s "https://min-api.cryptocompare.com/data/pricemultifull?fsyms=$currency&tsyms=USD&e=CCCAGG")

    # check if the currency symbol is valid
    if [ "$(jq -r ".DISPLAY.$currency.USD" <<< "$response")" = "null" ]; then
        echo "INVALID CURRENCY SYMBOL: $currency"
        exit 1
    fi

    # extract the price and timestamp
    price=$(jq -r ".RAW.$currency.USD.PRICE" <<< "$response")
    timestamp=$(jq -r ".RAW.$currency.USD.LASTUPDATE" <<< "$response")
    formatted_time=$(format_timestamp "$timestamp")
    usd_value=$(echo "$amount * $price" | bc)
    formatted_usd=$(printf "%.2f" $usd_value)

    echo "$amount $currency â‰ˆ $formatted_usd USD"
    echo "(UPDATED $formatted_time)"
    exit 0
fi

# if the script reaches here, it means the input was incorrect
echo "USAGE: coin [full] or coin <currency_symbol> <amount>"
exit 1
